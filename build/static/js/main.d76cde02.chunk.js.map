{"version":3,"sources":["api.js","Layout.components.js","ButtonsTab.js","utils.js","CardGameBoard.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","createDeckAndDraw","a","get","params","deck_count","data","deckId","deck_id","drawCardFromDeck","cardResponse","count","cards","value","image","Layout","styled","div","Header","header","CardLayout","ButtonWrapper","Button","button","props","type","ButtonsTab","onButtonClick","name","onClick","cardValues","compareValues","previousCardValue","currentCardValue","bet","previousCardValueIndex","indexOf","currentCardValueIndex","Error","CardGameBoard","state","cardImageUrl","cardValue","result","target","setState","this","src","alt","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d76cde02.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst api = axios.create({\n\tbaseURL: \"https://deckofcardsapi.com/api/deck/\",\n});\n\nexport const createDeckAndDraw = async () => {\n\tconst { data } = await api.get(\"new/shuffle/\", {\n\t\tparams: {\n\t\t\tdeck_count: 1,\n\t\t},\n\t});\n\n\tconst { deck_id: deckId } = data;\n\n    const cardResponse = await drawCardFromDeck(deckId);\n\treturn cardResponse;\n};\n\nexport const drawCardFromDeck = async (deckId) => {\n\tconst { data } = await api.get(`${deckId}/draw/`, {\n\t\tparams: {\n\t\t\tcount: 1,\n\t\t},\n\t});\n\n\tconst { cards } = data;\n\tconst { value, image } = cards[0];\n\treturn { deckId, value, image };\n};\n","import styled from 'styled-components';\n\nexport const Layout = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Header = styled.header`\n  width: 100%;\n  text-align: center;\n  background-color: green;\n  font-size: 24px;\n  font-weight: bold;\n  color: whitesmoke;\n  padding: 16px 0;\n`;\n\nexport const CardLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 16px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top 32px;\n`;\n\nconst Button = styled.button`\n\tcolor: white;\n\tbackground-color: ${(props) => (props.type === \"down\" ? \"red\" : \"green\")};\n\tpadding: 16px 8px;\n\tborder: 2px solid black;\n\tborder-radius: 4px;\n\tmin-width: 55px;\n`;\n\nconst ButtonsTab = ({ onButtonClick }) => (\n\t<ButtonWrapper>\n\t\t<Button name=\"down\" onClick={onButtonClick} type=\"down\">\n\t\t\tDown\n\t\t</Button>\n\t\t<Button name=\"up\" onClick={onButtonClick} type=\"up\">\n\t\t\tUp\n\t\t</Button>\n\t</ButtonWrapper>\n);\n\nexport default ButtonsTab;\n","const cardValues = [\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    '10',\n    'JACK',\n    'QUEEN',\n    'KING',\n    'ACE'\n]\n\nconst compareValues = ({previousCardValue, currentCardValue, bet}) => {\n    const previousCardValueIndex = cardValues.indexOf(previousCardValue);\n    const currentCardValueIndex = cardValues.indexOf(currentCardValue);\n\n    if(previousCardValueIndex === -1 || currentCardValueIndex === -1) {\n        throw new Error('Supplied cardValue not found in cardValues array')\n    }\n\n    if(bet === \"up\" && previousCardValueIndex > currentCardValueIndex) {\n        return 'lose!'\n    }\n    if(bet === \"up\" && previousCardValueIndex < currentCardValueIndex) {\n        return 'win!'\n    }\n    if(bet === \"down\" && previousCardValueIndex < currentCardValueIndex) {\n        return 'lose!'\n    }\n    if(bet === \"down\" && previousCardValueIndex > currentCardValueIndex) {\n        return 'win!'\n    }\n    if(previousCardValueIndex === currentCardValueIndex) {\n        return 'tie!'\n    }\n};\n\nexport default compareValues;\n","import React, { Component } from \"react\";\nimport { createDeckAndDraw, drawCardFromDeck } from \"./api\";\nimport { CardLayout } from \"./Layout.components\";\nimport ButtonsTab from \"./ButtonsTab\";\nimport compareValues from \"./utils\"\n\nexport default class CardGameBoard extends Component {\n\tstate = {\n\t\tcardImageUrl: null,\n\t\tcardValue: null,\n\t\tdeckId: null,\n\t\tresult: null\n\t};\n\n\tasync componentDidMount() {\n\t\tconst { deckId, value, image } = await createDeckAndDraw();\n\t\tthis.setState({\n\t\t\tdeckId,\n\t\t\tcardValue: value,\n\t\t\tcardImageUrl: image,\n\t\t});\n\t}\n\n\tonButtonClick = async ({target: {name: bet}}) => {\n\t\tthis.setState({\n\t\t\tcardImageUrl: null\n\t\t})\n\t\tconst {deckId, cardValue: previousCardValue} = this.state;\n\t\tconst {value: currentCardValue, image} = await drawCardFromDeck(deckId);\n\t\tconst result = compareValues({\n\t\t\tpreviousCardValue,\n\t\t\tcurrentCardValue,\n\t\t\tbet\n\t\t})\n\n\t\tthis.setState({\n\t\t\tresult,\n\t\t\tcardValue: currentCardValue,\n\t\t\tcardImageUrl: image\n\t\t})\n\t}\n\n\trender() {\n\t\tconst {result, cardImageUrl} = this.state;\n\t\tif(!cardImageUrl) {\n\t\t\treturn <h1>Loading..</h1>\n\t\t}\n\t\treturn (\n\t\t\t<CardLayout>\n\t\t\t\t<img src={cardImageUrl} alt=\"This is your card\"></img>\n\t\t\t\t<ButtonsTab onButtonClick={this.onButtonClick}/>\n\t\t\t\t{result && <h2>{`You, ${result}`}</h2>}\n\t\t\t</CardLayout>\n\t\t)\n\t}\n}\n","import React, { Component } from \"react\";\nimport { createDeckAndDraw } from \"./api\";\nimport \"./App.css\";\nimport { Header, Layout } from \"./Layout.components\";\nimport CardGameBoard from \"./CardGameBoard\";\n\nconst App = () => (\n\t<div className=\"App\">\n\t\t<Header>\n\t\t\tBet up or down on the next card's value</Header>\n\t\t<Layout>\n\n\t\t\t<CardGameBoard></CardGameBoard>\n\t\t</Layout>\n\t</div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}